source("cachematrix.R")
load("C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R")
source('C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix()
a
a(1:4,2,2)
a
a(matrix(1:4,2,2))
m <- matrix(1:4,2,2,...)
m <- matrix(1:4,2,2)
m
a(m)
a <- makeCacheMatrix(m)
a
cacheSolve(m)
x
source('C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R')
m
a <- makeCacheMatrix(matrix(5:8,2,2))
a
cacheSolve(m)
cacheSolve(a)
source('C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
cacheSolve(m)
source('C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R')
cacheSolve()
source('C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat
mat2 <- makeCacheMatrix(mat)
mat2
mat2$get()
mat2$getinverse()
cacheSolve(mat2)
mat2$getinverse()
mat2$get()
cacheSolve(mat)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
m$getinverse()
cacheSolve(m)
m$getinverse()
cacheSolve(m)
source('C:/Users/tiiu.ainetdin/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
Sys.getenv("JAVA_HOME")
install.packages('rJava', repos='http://www.rforge.net/')
library(rJava)
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_65\\")
library(rJava)
Sys.getenv("JAVA_HOME")
library(rJava)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweigth)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data("airquality")
p <- data("airquality")
head(p)
library(gg2plot)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
source('C:/Users/tiiu.ainetdin/Reproducible Research/Cource_project!_.R')
file_source
source('C:/Users/tiiu.ainetdin/Reproducible Research/Cource_project!_.R')
source('C:/Users/tiiu.ainetdin/Reproducible Research/Cource_project!_.R')
source('C:/Users/tiiu.ainetdin/Reproducible Research/Cource_project!_.R')
Cource_project!_
act = read.csv("./data/activity.csv", header=TRUE)
getwd
getwd()
getwd()
pwd
wd
getwd()
setwd("C:/Users/tiiu.ainetdin/Reproducible-Research2/RepData_PeerAssessment1")
getwd()
dir
ls
getwd()
unzip(zipfile="activity.zip")
data()
totalSteps
totalSteps
stepsMeanPerInterval
avgStepsPerInterval <- tapply(data$steps, data$interval, mean, na.rm = T)
data()
data <- read.csv("activity.csv")
data
totalSteps <- tapply(data$steps, data$date, sum)
totalSteps
meanTotalSteps <- mean(totalSteps, na.rm=TRUE)
meanTotalSteps
median <- median(totalSteps, na.rm=TRUE)
median
avgStepsPerInterval <- tapply(data$steps, data$interval, mean, na.rm = T)
avgStepsPerInterval
seq(along = avgStepsPerInterval)[avgStepsPerInterval == max(avgStepsPerInterval)]
maxIntervalDays <- max(avgStepsPerInterval, na.rm=TRUE)
maxIntervalDays
maxIndex <- as.numeric(which(avgStepsPerInterval == maxIntervalDays))
maxIndex
avgStepsPerInterval
avgStepsPerInterval[is.nan(avgStepsPerInterval)]
avgStepsPerInterval[is.nan(avgStepsPerInterval)] <- 0
avgStepsPerInterval
avgStepsPerInterval <- tapply(data$steps, data$interval, mean, na.rm = T)
avgStepsPerInterval
length(avgStepsPerInterval)
totalSteps
lenght(totalSteps)
length(totalSteps)
totalSteps
length(avgStepsPerInterval)
avgStepsPerInterval
avgStepsPerInterval[is.nan(avgStepsPerInterval)]
length(avgStepsPerInterval[is.nan(avgStepsPerInterval)])
sum(as.numeric(is.na(data$steps)))
avgStepsPerInterval
avgStepsPerInterval[avgStepsPerInterval$interval]
interval2steps <- function(interval) {
stepsInterval[stepsInterval$interval == interval, ]$steps
}
iterval2steps
interval2steps
interval2steps <- function(interval) {
+     avgStepsPerInterval[avgStepsPerInterval$interval == interval, ]$steps
+ }
interval2steps <- function(interval) {
+     avgStepsPerInterval[avgStepsPerInterval$interval == interval, ]$steps        +
}
interval2steps <- function(interval) {
+     avgStepsPerInterval[avgStepsPerInterval$interval == interval, ]$steps
+ }
interval2steps <- function(interval) {
+     avgStepsPerInterval[avgStepsPerInterval$interval == interval, ]$steps
}
interval2steps()
interval2steps <- function(interval) {
avgStepsPerInterval[avgStepsPerInterval$interval == interval, ]$steps
}
interval2steps()
interval2steps
filledData <- data
filledData
summary(filledData)
filledData$steps <- mapply(interval2steps, filledData$interval)
for (row in 1:length(filledData$steps)){
if(is.na(filledData[row,1])){
filledData[row,1] = interval2steps(filledData[row,1]$interval)
}
}
for (row in 1:length(filledData$steps)){ if(is.na(filledData[row,1])){filledData[row,1] = interval2steps(filledData[row,1]$interval)      }}
filledData
summary(filledData)
for (row in 1:length(filledData$steps)){ if(is.na(filledData[row,1])){filledData[row,1] = interval2steps(filledData[row,1]$interval)      }}
for (row in 1:length(filledData$steps)){if(is.na(filledData[row, ]$steps)){ filledData[row, ]$steps = newInterval(filledData[row, ]$interval)}
}
for (row in 1:length(filledData$steps)){if(is.na(filledData[row, ]$steps)){ filledData[row, ]$steps = interval2steps(filledData[row, ]$interval)}}
avgStepsPerInterval <- aggregate(steps ~ interval, data = data, mean, na.rm = TRUE)
for (row in 1:length(filledData$steps)){if(is.na(filledData[row, ]$steps)){ filledData[row, ]$steps = interval2steps(filledData[row, ]$interval)}}
summary(filledData)
filledData$weekday = weekdays(filledData$date)
weekdays()
filledData$date
weekdays(filledData$date)
filledData$weekday = weekdays(filledData$date)
filledData$weekday = weekdays(as.Date(filledData$date))
filledData$weekday
filledData$type = ifelse(filledData$weekday=="Saturday"|filledData$weekday=="Sunday","Weekend","Weekday")
filledData$type
Sys.setlocale("LC_TIME","English United States")
Sys.setlocale("LC_TIME", "en_US")
filledData$weekday = weekdays(as.Date(filledData$date))
filledData$weekday
Sys.setlocale("LC_TIME", "English")
filledData$weekday = weekdays(as.Date(filledData$date))
filledData$weekday
filledData$type = ifelse(filledData$weekday=="Saturday"|filledData$weekday=="Sunday","Weekend","Weekday")
filledData$type
filledData$type  =as.factor(filledData$type)
filledData$interval=as.factor(filledData$interval)
library(ggplot2)
library(ggplot2)
r=aggregate(filledData$steps,list(as.factor(filledData$interval),as.factor(filledData$type)),mean)
p <- ggplot(r, aes(x = as.integer(Group.1), y=x)) + geom_line()
p + facet_grid(Group.2~.)+xlab("Interval")+ylab("Average Steps in Interval")
